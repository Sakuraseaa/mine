# 0 "debug.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "debug.c"
# 1 "/home/steven/mine/src/include/lib/printk.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 5 "/home/steven/mine/src/include/lib/printk.h" 2
# 1 "/home/steven/mine/src/include/base/font.h" 1




# 4 "/home/steven/mine/src/include/base/font.h"
unsigned char font_ascii[256][16] =
 {

  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00},
  {0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x44, 0x44, 0x44, 0xfe, 0x44, 0x44, 0x44, 0x44, 0x44, 0xfe, 0x44, 0x44, 0x44, 0x00, 0x00},
  {0x10, 0x3a, 0x56, 0x92, 0x92, 0x90, 0x50, 0x38, 0x14, 0x12, 0x92, 0x92, 0xd4, 0xb8, 0x10, 0x10},
  {0x62, 0x92, 0x94, 0x94, 0x68, 0x08, 0x10, 0x10, 0x20, 0x2c, 0x52, 0x52, 0x92, 0x8c, 0x00, 0x00},
  {0x00, 0x70, 0x88, 0x88, 0x88, 0x90, 0x60, 0x47, 0xa2, 0x92, 0x8a, 0x84, 0x46, 0x39, 0x00, 0x00},
  {0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x00},
  {0x80, 0x40, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x80, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x92, 0x54, 0x38, 0x54, 0x92, 0x10, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x08, 0x08, 0x10},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
  {0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80},
  {0x00, 0x18, 0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00, 0x00},


  {0x00, 0x18, 0x24, 0x42, 0x42, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x40, 0x40, 0x7e, 0x00, 0x00},
  {0x00, 0x18, 0x24, 0x42, 0x02, 0x02, 0x04, 0x18, 0x04, 0x02, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x0c, 0x0c, 0x0c, 0x14, 0x14, 0x14, 0x24, 0x24, 0x44, 0x7e, 0x04, 0x04, 0x1e, 0x00, 0x00},
  {0x00, 0x7c, 0x40, 0x40, 0x40, 0x58, 0x64, 0x02, 0x02, 0x02, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x18, 0x24, 0x42, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x7e, 0x42, 0x42, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00},
  {0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x26, 0x1a, 0x02, 0x42, 0x24, 0x18, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x08, 0x08, 0x10},


  {0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00},
  {0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x04, 0x08, 0x10, 0x10, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
  {0x00, 0x38, 0x44, 0x82, 0x9a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x9c, 0x80, 0x46, 0x38, 0x00, 0x00},
  {0x00, 0x18, 0x18, 0x18, 0x18, 0x24, 0x24, 0x24, 0x24, 0x7e, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0xf0, 0x48, 0x44, 0x44, 0x44, 0x48, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44, 0xf8, 0x00, 0x00},
  {0x00, 0x3a, 0x46, 0x42, 0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x82, 0x42, 0x44, 0x38, 0x00, 0x00},
  {0x00, 0xf8, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0xf8, 0x00, 0x00},
  {0x00, 0xfe, 0x42, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x42, 0x42, 0xfe, 0x00, 0x00},


  {0x00, 0xfe, 0x42, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x44, 0x40, 0x40, 0x40, 0xf0, 0x00, 0x00},
  {0x00, 0x3a, 0x46, 0x42, 0x82, 0x80, 0x80, 0x9e, 0x82, 0x82, 0x82, 0x42, 0x46, 0x38, 0x00, 0x00},
  {0x00, 0xe7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00},
  {0x00, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x84, 0x48, 0x30, 0x00},
  {0x00, 0xe7, 0x42, 0x44, 0x48, 0x50, 0x50, 0x60, 0x50, 0x50, 0x48, 0x44, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0xf0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0xfe, 0x00, 0x00},
  {0x00, 0xc3, 0x42, 0x66, 0x66, 0x66, 0x5a, 0x5a, 0x5a, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0xc7, 0x42, 0x62, 0x62, 0x52, 0x52, 0x52, 0x4a, 0x4a, 0x4a, 0x46, 0x46, 0xe2, 0x00, 0x00},
  {0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00},


  {0x00, 0xf8, 0x44, 0x42, 0x42, 0x42, 0x44, 0x78, 0x40, 0x40, 0x40, 0x40, 0x40, 0xf0, 0x00, 0x00},
  {0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x92, 0x8a, 0x44, 0x3a, 0x00, 0x00},
  {0x00, 0xfc, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0x3a, 0x46, 0x82, 0x82, 0x80, 0x40, 0x38, 0x04, 0x02, 0x82, 0x82, 0xc4, 0xb8, 0x00, 0x00},
  {0x00, 0xfe, 0x92, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00},
  {0x00, 0xe7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x3c, 0x00, 0x00},
  {0x00, 0xe7, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x24, 0x24, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00},
  {0x00, 0xe7, 0x42, 0x42, 0x42, 0x5a, 0x5a, 0x5a, 0x5a, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00},
  {0x00, 0xe7, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x24, 0x24, 0x24, 0x42, 0x42, 0xe7, 0x00, 0x00},
  {0x00, 0xee, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00},


  {0x00, 0xfe, 0x84, 0x84, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x42, 0x82, 0xfe, 0x00, 0x00},
  {0x00, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x00},
  {0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x02, 0x02},
  {0x00, 0x7c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x7c, 0x00},
  {0x00, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00},
  {0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x08, 0x04, 0x3c, 0x44, 0x84, 0x84, 0x8c, 0x76, 0x00, 0x00},
  {0xc0, 0x40, 0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x64, 0x58, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x4c, 0x84, 0x84, 0x80, 0x80, 0x82, 0x44, 0x38, 0x00, 0x00},


  {0x0c, 0x04, 0x04, 0x04, 0x04, 0x34, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x36, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0xfc, 0x80, 0x82, 0x42, 0x3c, 0x00, 0x00},
  {0x0e, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x34, 0x04, 0x04, 0x38},
  {0xc0, 0x40, 0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe3, 0x00, 0x00},
  {0x00, 0x10, 0x10, 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00},
  {0x00, 0x04, 0x04, 0x00, 0x00, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x30},
  {0xc0, 0x40, 0x40, 0x40, 0x40, 0x4e, 0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0xe6, 0x00, 0x00},
  {0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0xdb, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xe3, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xd8, 0x64, 0x42, 0x42, 0x42, 0x42, 0x42, 0x64, 0x58, 0x40, 0x40, 0xe0},
  {0x00, 0x00, 0x00, 0x00, 0x34, 0x4c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x4c, 0x34, 0x04, 0x04, 0x0e},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x62, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x86, 0x82, 0xc0, 0x38, 0x06, 0x82, 0xc2, 0xbc, 0x00, 0x00},
  {0x00, 0x00, 0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0e, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3b, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x18, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x5a, 0x5a, 0x5a, 0x24, 0x24, 0x24, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x44, 0x28, 0x28, 0x10, 0x28, 0x28, 0x44, 0xc6, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x42, 0x42, 0x24, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x60},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x82, 0x84, 0x08, 0x10, 0x20, 0x42, 0x82, 0xfe, 0x00, 0x00},
  {0x00, 0x06, 0x08, 0x10, 0x10, 0x10, 0x10, 0x60, 0x10, 0x10, 0x10, 0x10, 0x08, 0x06, 0x00, 0x00},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x00, 0x60, 0x10, 0x08, 0x08, 0x08, 0x08, 0x06, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00, 0x00},
  {0x00, 0x72, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},


  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
};
# 6 "/home/steven/mine/src/include/lib/printk.h" 2
# 1 "/home/steven/mine/src/include/lib/linkage.h" 1
# 7 "/home/steven/mine/src/include/lib/printk.h" 2
# 1 "/home/steven/mine/src/include/spinlock.h" 1



# 1 "/home/steven/mine/src/include/base/basetype.h" 1
# 10 "/home/steven/mine/src/include/base/basetype.h"
typedef char bool;

typedef unsigned long size_t;

typedef char int8;
typedef short int16;
typedef int int32;
typedef long int64;

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef unsigned long u64;

typedef int32 pid_t;
typedef int32 dev_t;

typedef u64 time_t;
typedef u64 idx_t;
typedef u64 cpuflg_t;

typedef u16 mode_t;

typedef int64 fd_t;
typedef enum std_fd_t
{
    STDIN_FILENO,
    STDOUT_FILENO,
    STDERR_FILENO,
} std_fd_t;



typedef int err_t;
# 5 "/home/steven/mine/src/include/spinlock.h" 2

typedef struct
{
    __volatile__ unsigned long lock;
} spinlock_t;
typedef spinlock_t spinlock_t;

typedef struct equity_spinlock_t{
    union {
        __volatile__ u32 slock;
        struct {
            volatile u16 owner;
            volatile u16 next;
        };
    };
}fair_spinlock_t;



typedef struct{
    unsigned int lock;
}rw_spinlock_t;

void spin_init(spinlock_t *lock);
void spin_lock(spinlock_t *lock);
void spin_unlock(spinlock_t *lock);

long spin_trylock(spinlock_t *lock);

void fair_spin_init(fair_spinlock_t* lock);
void fair_spin_lock(fair_spinlock_t* lock);
void fair_spin_unlock(fair_spinlock_t* lock);
# 8 "/home/steven/mine/src/include/lib/printk.h" 2
# 1 "/home/steven/mine/src/include/task.h" 1



# 1 "/home/steven/mine/src/include/signal.h" 1



typedef unsigned int sigset_t;
# 45 "/home/steven/mine/src/include/signal.h"
typedef void(*sighadler_t)(long);

typedef struct sigaction
{
 void (*sa_handler)(long);
 sigset_t sa_mask;
 int sa_flags;
 void (*sa_restorer)(void);
}sigaction_t;


int raise(int sig);
int kill(long pid, long signum);
sighadler_t sys_signal(long signum, sighadler_t hander, void (*restorer)(void));
int sigaddset(sigset_t *mask, int signo);
int sigdelset(sigset_t *mask, int signo);
int sigemptyset(sigset_t *mask);
int sigfillset(sigset_t *mask);
int sigismember(sigset_t *mask, int signo);
int sigpending(sigset_t *set);
int sigprocmask(int how, sigset_t *set, sigset_t *oldset);
int sigsuspend(sigset_t *sigmask);
int sigaction(int sig, struct sigaction *act, struct sigaction *oldact);
# 5 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/memory.h" 1




# 1 "/home/steven/mine/src/include/lib/lib.h" 1
# 23 "/home/steven/mine/src/include/lib/lib.h"
typedef struct List
{
 struct List *prev;
 struct List *next;
}list_t;

typedef list_t list_h_t;
typedef list_t list_n_t;

void list_init(struct List *list);

void list_add_to_behind(struct List *entry, struct List *pnew);

void list_add_to_before(struct List *entry, struct List *pnew);

void list_del(struct List *entry);
bool list_search(list_t *list, list_t *node);

long list_is_empty(struct List *entry);

struct List *list_prev(struct List *entry);

struct List *list_next(struct List *entry);

long list_is_empty_careful(const list_h_t *head);
# 58 "/home/steven/mine/src/include/lib/lib.h"
void *memcpy(void *From, void *To, long Num);






int memcmp(void *FirstPart, void *SecondPart, long Count);



void *memset(void *Address, unsigned char C, long Count);




char *strcpy(char *Dest,const char *Src);




char *strncpy(char *Dest, char *Src, long Count);




char *strcat(char *Dest, char *Src);







int strcmp(char *FirstPart,const char *SecondPart);







int strncmp(char *FirstPart, char *SecondPart, long Count);

char *strchr(const char *str, const char ch);


char *strrchr(const char *str, const char ch);

int strlen(const char *String);
# 122 "/home/steven/mine/src/include/lib/lib.h"
unsigned long bit_set(unsigned long *addr, unsigned long nr);

unsigned long bit_get(unsigned long *addr, unsigned long nr);

unsigned long bit_clean(unsigned long *addr, unsigned long nr);

unsigned char io_in8(unsigned short port);

unsigned int io_in32(unsigned short port);

void io_out8(unsigned short port, unsigned char value);

void io_out32(unsigned short port, unsigned int value);
# 144 "/home/steven/mine/src/include/lib/lib.h"
unsigned long rdmsr(unsigned long address);

void wrmsr(unsigned long address, unsigned long value);

unsigned long get_rsp();
void lower(char *str);
void upper(char *str);
unsigned long get_rflags();
long str_find_char(char *string, char ch, long strlen);
long verify_area(unsigned char *addr, unsigned long size);

long copy_from_user(void *from, void *to, unsigned long size);
long copy_to_user(void *from, void *to, unsigned long size);
long verify_area(unsigned char *addr, unsigned long size);
long copy_from_user(void *from, void *to, unsigned long size);
long copy_to_user(void *from, void *to, unsigned long size);
long strncpy_from_user(void *from, void *to, unsigned long size);
long strnlen_user(void *src, unsigned long maxlen);
# 6 "/home/steven/mine/src/include/memory.h" 2
# 59 "/home/steven/mine/src/include/memory.h"
typedef struct
{
    unsigned long pml4t;
} pml4t_t;



typedef struct
{
    unsigned long pdpt;
} pdpt_t;



typedef struct
{
    unsigned long pdt;
} pdt_t;



typedef struct
{
    unsigned long pt;
} pt_t;
# 147 "/home/steven/mine/src/include/memory.h"
struct Memory_E820_Formate
{
    unsigned int address1;
    unsigned int address2;
    unsigned int length1;
    unsigned int length2;
    unsigned int type;
};
unsigned long *Global_CR3 = ((void *)0);

struct E820
{
    unsigned long address;
    unsigned long length;
    unsigned int type;
} __attribute__((packed));



struct Page
{
    struct Zone *zone_struct;
    unsigned long PHY_address;
    unsigned long attribute;
    unsigned long reference_count;
    unsigned long age;
};


struct Zone
{
    struct Page *pages_group;
    unsigned long pages_length;
    unsigned long zone_start_address;
    unsigned long zone_end_address;
    unsigned long zone_length;
    unsigned long attribute;
    struct Global_Memory_Descriptor *GMD_struct;
    unsigned long page_using_count;
    unsigned long page_free_count;
    unsigned long total_pages_link;
};

struct Global_Memory_Descriptor
{
    struct E820 e820[32];
    unsigned long e820_length;

    unsigned long *bits_map;
    unsigned long bits_size;
    unsigned long bits_length;

    struct Page *pages_struct;
    unsigned long pages_size;
    unsigned long pages_length;

    struct Zone *zones_struct;
    unsigned long zones_size;
    unsigned long zones_length;

    unsigned long start_code;
    unsigned long end_code;
    unsigned long end_data;
    unsigned long start_brk;

    unsigned long end_rodata;

    unsigned long end_of_struct;
};



typedef struct Slab
{
    struct List list;
    struct Page *page;

    unsigned long using_count;
    unsigned long free_count;

    void *Vaddress;


    unsigned long color_length;
    unsigned long color_count;
    unsigned long *color_map;
}Slab_t;


typedef struct Slab_cache
{
    unsigned long size;
    unsigned long total_using;
    unsigned long total_free;
    struct Slab *cache_pool;
    struct Slab *cache_dma_pool;
    void *(*constructor)(void *Vaddress, unsigned long arg);
    void *(*destructor)(void *vaddress, unsigned long arg);
}Slab_cache_t;

extern struct Global_Memory_Descriptor memory_management_struct;


int ZONE_DMA_INDEX = 0;
int ZONE_NORMAL_INDEX = 0;
int ZONE_UNMAPED_INDEX = 0;




struct Slab_cache kmalloc_cache_size[16] =
    {
        {32, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {64, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {128, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {256, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {512, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {1024, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {2048, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {4096, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {8192, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {16384, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {32768, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {65536, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {131072, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {262144, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {524288, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
        {1048576, 0, 0, ((void *)0), ((void *)0), ((void *)0), ((void *)0)},
};
# 298 "/home/steven/mine/src/include/memory.h"
inline static unsigned long *Get_gdt()
{
    unsigned long *tmp;
    __asm__ __volatile__(
        "movq	%%cr3,	%0	\n\t"
        : "=r"(tmp)
        :
        : "memory");
    return tmp;
}

unsigned long page_init(struct Page *page, unsigned long flags);
unsigned long page_clean(struct Page *page);
unsigned long get_page_attribute(struct Page *page);
unsigned long set_page_attribute(struct Page *page, unsigned long flags);

struct Page *alloc_pages(int zone_select, int number, unsigned long page_flags);
void free_pages(struct Page *page, int number);




void *kmalloc(unsigned long size, unsigned long flags);
struct Slab *kmalloc_create(unsigned long size);
unsigned long kfree(void *address);

struct Slab_cache *slab_create(unsigned long size, void *(*constructor)(void *Vaddress, unsigned long arg), void *(*destructor)(void *Vaddress, unsigned long arg), unsigned long arg);
unsigned long slab_destroy(struct Slab_cache *slab_cache);

unsigned long slab_init();
void *slab_malloc(struct Slab_cache *slab_cache, unsigned long arg);
unsigned long slab_free(struct Slab_cache *slab_cache, void *address, unsigned long arg);
unsigned long do_brk(unsigned long addr, unsigned long len);
void pagetable_init();
void init_memory();
unsigned long* pde_ptr(unsigned long vaddr);
unsigned long* pml4e_ptr(unsigned long vaddr);
unsigned long* pdpe_ptr(unsigned long vaddr);
unsigned long* pte_ptr(unsigned long vaddr);
u64 do_wp_page(u64 virtual_address);
void do_no_page(u64 virtual_address);
void pagetable_4K_init();
# 6 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/lib/cpu.h" 1
# 16 "/home/steven/mine/src/include/lib/cpu.h"
static inline void get_cpuid(unsigned int Mop, unsigned int Sop, unsigned int *a,
                             unsigned int *b, unsigned int *c, unsigned int *d)
{
    __asm__ __volatile__("cpuid \n\t"
                         : "=a"(*a), "=b"(*b), "=c"(*c), "=d"(*d)
                         : "0"(Mop), "2"(Sop));
}

void init_cpu(void);
# 7 "/home/steven/mine/src/include/task.h" 2

# 1 "/home/steven/mine/src/include/base/ptrace.h" 1




pt_regs_t
{
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long rbx;
 unsigned long rcx;
 unsigned long rdx;
 unsigned long rsi;
 unsigned long rdi;
 unsigned long rbp;
 unsigned long ds;
 unsigned long es;
 unsigned long rax;
 unsigned long func;
 unsigned long errcode;
 unsigned long rip;
 unsigned long cs;
 unsigned long rflags;
 unsigned long rsp;
 unsigned long ss;
};
# 9 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/lib/printk.h" 1
# 10 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/base/sched.h" 1
# 11 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/waitqueue.h" 1






typedef struct WAIT_QUEUE
{
    struct List wait_list;
    task_t *tsk;
} wait_queue_t;

bool wait_queue_is_empty(wait_queue_t* wait_queue);
void wait_queue_init(wait_queue_t *wait_queue, task_t *tsk);
void sleep_on(wait_queue_t *wait_queue_head);
void interruptible_sleep_on(wait_queue_t *wait_queue_head);
void wakeup(wait_queue_t *wait_queue_head, long state);
void wakeup_pid(wait_queue_t *wait_queue_head, long state, long pid);
# 12 "/home/steven/mine/src/include/task.h" 2
# 1 "/home/steven/mine/src/include/fs/VFS.h" 1
# 9 "/home/steven/mine/src/include/fs/VFS.h"
# 1 "/home/steven/mine/src/fs/FAT32/fat32.h" 1





struct FAT32_BootSector
{
    unsigned char BS_jmpBoot[3];
    unsigned char BS_OEMName[8];
    unsigned short BPB_BytesPerSec;
    unsigned char BPB_SecPerClus;
    unsigned short BPB_RsvdSecCnt;
    unsigned char BPB_NumFATs;
    unsigned short BPB_RootEntCnt;
    unsigned short BPB_TotSec16;
    unsigned char BPB_Media;
    unsigned short BPB_FATSz16;
    unsigned short BPB_SecPerTrk;
    unsigned short BPB_NumHeads;
    unsigned int BPB_HiddSec;
    unsigned int BPB_TotSec32;
    unsigned int BPB_FATSz32;
    unsigned short BPB_ExtFlags;
    unsigned short BPB_FSVer;
    unsigned int BPB_RootClus;
    unsigned short BPB_FSInfo;
    unsigned short BPB_BkBootSec;
    unsigned char BPB_Reserved[12];
    unsigned char BS_DrvNum;
    unsigned char BS_Reserved1;
    unsigned char BS_BootSig;
    unsigned int BS_VolID;
    unsigned char BS_VolLab[11];
    unsigned char BS_FilSysType[8];

    unsigned char BootCode[420];
    unsigned short BS_TraiSig;
} __attribute__((packed));


struct FAT32_FSInfo
{
    unsigned int FSI_LeadSig;
    unsigned char FSI_Reserved1[480];
    unsigned int FSI_StrucSig;
    unsigned int FSI_Free_Count;
    unsigned int FSI_Nxt_Free;
    unsigned char Reserved2[12];
    unsigned int FSI_TrailSig;
} __attribute__((packed));


struct FAT32_sb_info
{
    unsigned long start_sector;
    unsigned long sector_count;

    long sector_per_cluster;
    long bytes_per_cluster;
    long bytes_per_sector;

    unsigned long Data_firstsector;
    unsigned long FAT1_firstsector;
    unsigned long sector_per_FAT;
    unsigned long NumFATs;

    unsigned long fsinfo_sector_infat;
    unsigned long bootsector_bk_infat;

    struct FAT32_FSInfo *fat_fsinfo;
};

struct FAT32_inode_info
{
    unsigned long first_cluster;
    unsigned long dentry_location;
    unsigned long dentry_position;

    unsigned short create_date;
    unsigned short create_time;
    unsigned short write_date;
    unsigned short write_time;
};
# 95 "/home/steven/mine/src/fs/FAT32/fat32.h"
struct FAT32_Directory
{
    unsigned char DIR_Name[11];
    unsigned char DIR_Attr;
    unsigned char DIR_NTRes;


    unsigned char DIR_CrtTimeTenth;
    unsigned short DIR_CrtTime;
    unsigned short DIR_CrtDate;
    unsigned short DIR_LastAccDate;
    unsigned short DIR_FstClusHI;
    unsigned short DIR_WrtTime;
    unsigned short DIR_WrtDate;
    unsigned short DIR_FstClusLO;
    unsigned int DIR_FileSize;
} __attribute__((packed));





struct FAT32_LongDirectory
{
    unsigned char LDIR_Ord;
    unsigned short LDIR_Name1[5];
    unsigned char LDIR_Attr;
    unsigned char LDIR_Type;
    unsigned char LDIR_Chksum;
    unsigned short LDIR_Name2[6];
    unsigned short LDIR_FstClusLO;
    unsigned short LDIR_Name3[2];
} __attribute__((packed));

extern struct index_node_operations FAT32_inode_ops;
extern struct file_operations FAT32_file_ops;
extern struct dir_entry_operations FAT32_dentry_ops;
extern struct super_block_operations FAT32_sb_ops;
# 10 "/home/steven/mine/src/include/fs/VFS.h" 2

# 1 "/home/steven/mine/src/include/fs/buffer.h" 1


# 1 "/home/steven/mine/src/include/memory.h" 1
# 4 "/home/steven/mine/src/include/fs/buffer.h" 2

# 1 "/home/steven/mine/src/include/waitqueue.h" 1
# 6 "/home/steven/mine/src/include/fs/buffer.h" 2
# 1 "/home/steven/mine/src/include/semaphore.h" 1




# 1 "/home/steven/mine/src/include/task.h" 1
# 6 "/home/steven/mine/src/include/semaphore.h" 2
# 1 "/home/steven/mine/src/include/lib/atomic.h" 1



typedef struct
{
    __volatile__ long value;
} atomic_T;





static inline void atomic_inc(atomic_T *atomic)
{

    __asm__ __volatile__("lock incq %0 \n\t"
                         : "=m"(atomic->value)
                         : "m"(atomic->value)
                         : "memory");
}


static inline void atomic_dec(atomic_T *atomic)
{
    __asm__ __volatile__("lock decq %0 \n\t"
                         : "=m"(atomic->value)
                         : "m"(atomic->value)
                         : "memory");
}


static inline void atomic_sub(atomic_T *atomic, long value)
{
    __asm__ __volatile__("lock subq %1, %0 \n\t"
                         : "=m"(atomic->value)
                         : "r"(value)
                         : "memory");
}


static inline void atomic_add(atomic_T *atomic, long value)
{
    __asm__ __volatile__("lock addq %1, %0 \n\t"
                         : "=m"(atomic->value)
                         : "r"(value)
                         : "memory");
}


static inline void atomic_set_mask(atomic_T *atomic, long mask)
{
    __asm__ __volatile__("lock orq %1, %0\n\t"
                         : "=m"(atomic->value)
                         : "r"(mask)
                         : "memory");
}


static inline void atomic_clear_mask(atomic_T *atomic, long mask)
{
    __asm__ __volatile__("lock andq %1, %0\n\t"
                         : "=m"(atomic->value)
                         : "r"(mask)
                         : "memory");
}
# 7 "/home/steven/mine/src/include/semaphore.h" 2

# 1 "/home/steven/mine/src/include/semaphore.h" 1
# 9 "/home/steven/mine/src/include/semaphore.h" 2


typedef struct SEMAPHORE
{
    atomic_T conter;
    wait_queue_t wait;
} semaphore_t;

void semaphore_down(semaphore_t *semaphore);
void semaphore_up(semaphore_t *semaphore);
void semaphore_init(semaphore_t *semaphore, unsigned long count);
void wait_queue_init(wait_queue_t *wait_queue, task_t *tsk);
# 7 "/home/steven/mine/src/include/fs/buffer.h" 2




typedef struct block_buf{

    u64 count;
    u64 size;

    list_t free_list;
    list_t idle_list;
    wait_queue_t wait_list;
    list_t hash_table[63];
}bdesc_t;

typedef struct buffer
{
    char *data;
    bdesc_t *desc;
    dev_t dev;
    idx_t block;
    int refer_count;
    semaphore_t lock;
    bool dirty;
    bool valid;
    list_t hnode;
    list_t rnode;
} buffer_t;



err_t bwrite(buffer_t *buf);

err_t brelse(buffer_t *buf);


buffer_t *bread(unsigned long dev, unsigned long block, unsigned long size);



void buffer_init(void);
# 12 "/home/steven/mine/src/include/fs/VFS.h" 2


extern list_t super_list;
extern struct super_block *current_sb;
extern Slab_cache_t* Dir_Entry_Pool;


struct Disk_Partition_Table_Entry
{
    unsigned char flags;
    unsigned char start_head;
    unsigned short start_sector : 6,
        start_cylinder : 10;
    unsigned char type;
    unsigned char end_head;
    unsigned short end_sector : 6,
        end_cylinder : 10;
    unsigned int start_LBA;
    unsigned int sectors_limit;
} __attribute__((packed));


struct Disk_Partition_Table
{
    unsigned char BS_reserved[446];
    struct Disk_Partition_Table_Entry DPTE[4];
    unsigned short BS_TRailSig;
} __attribute__((packed));


struct file_system_type
{
    char *name;
    int fs_flags;

    struct super_block *(*read_superblock)(struct Disk_Partition_Table_Entry *DPTE, void *buf);


    struct file_system_type *next;
};

struct super_block_operations;
struct index_node_operations;
struct dir_entry_operations;
struct file_operations;
struct index_node;
struct dir_entry;

typedef struct ide_part_t
{
    char name[8];
    struct ide_disk_t *disk;
    u32 system;
    u32 start;
    u32 count;
} ide_part_t;


typedef struct super_block
{
    list_t node;

    struct dir_entry *root;

    struct buffer *buf;
    dev_t dev;
    u32 count;
    int type;
    size_t sector_size;
    size_t block_size;
    list_t inode_list;



    struct super_block_operations *sb_ops;

    u64 s_flags;

    void *private_sb_info;
}super_t;


typedef struct index_node
{

    list_t i_sb_list;

    mode_t i_mode;
    size_t file_size;
    unsigned long blocks;
    unsigned long attribute;

    struct buffer *buf;

    dev_t dev;
    dev_t rdev;

    idx_t nr;
    size_t count;

    time_t atime;
    time_t mtime;
    time_t ctime;

    int type;

    int uid;
    int gid;

    task_t *rxwaiter;
    task_t *txwaiter;

    struct super_block *sb;

    struct file_operations *f_ops;
    struct index_node_operations *inode_ops;

    void *private_index_info;
}inode_t;






typedef struct dir_entry
{
    char *name;
    int name_length;





    struct List child_node;
    struct List subdirs_list;

    struct index_node *dir_inode;
    struct dir_entry *parent;

    struct dir_entry_operations *dir_ops;
    super_t* d_sb;
}dir_entry_t;
typedef int (*filldir_t)(void *buf,char *name, long namelen,long offset);





struct file
{
    long position;
    unsigned long mode;

    struct dir_entry *dentry;

    struct file_operations *f_ops;


    void *private_data;
};

struct super_block_operations
{
    void (*write_superblock)(struct super_block *sb);
    void (*put_superblock)(struct super_block *sb);

    void (*write_inode)(struct index_node *inode);
};

struct index_node_operations
{
    long (*create)(struct index_node *inode, struct dir_entry *dentry, int mode);
    struct dir_entry *(*lookup)(struct index_node *parent_inode, struct dir_entry *dest_dentry);
    long (*mkdir)(struct index_node *inode, struct dir_entry *dentry, int mode);
    long (*rmdir)(struct index_node *inode, struct dir_entry *dentry);
    long (*rename)(struct index_node *old_inode, struct dir_entry *old_dentry, struct index_node *new_inode, struct dir_entry *new_dentry);
    long (*getattr)(struct dir_entry *dentry, unsigned long *attr);
    long (*setattr)(struct dir_entry *dentry, unsigned long *attr);
    long (*unlink)(struct index_node *dir, struct dentry* dentry);
};

struct dir_entry_operations
{
    long (*compare)(struct dir_entry *parent_dentry, char *source_filename, char *destination_filename);
    long (*hash)(struct dir_entry *dentry, char *filename);
    long (*release)(struct dir_entry *dentry);
    long (*iput)(struct dir_entry *dentry, struct index_node *inode);
    long (*d_delete)(struct dentry *dentry);
};


struct file_operations
{
    long (*open)(struct index_node *inode, struct file *filp);
    long (*close)(struct index_node *inode, struct file *filp);
    long (*read)(struct file *filp, char *buf, unsigned long count, long *position);
    long (*write)(struct file *filp, char *buf, unsigned long count, long *position);
    long (*lseek)(struct file *filp, long offset, long origin);
    long (*ioctl)(struct index_node *inode, struct file *filp, unsigned long cmd, unsigned long arg);
    long (*readdir)(struct file* filp, void* dirent, filldir_t filler);
};

struct super_block *mount_fs(char *name, struct Disk_Partition_Table_Entry *DPTE, void *buf);
unsigned long register_filesystem(struct file_system_type *fs);
unsigned long unregister_filesystem(struct file_system_type *fs);
struct dir_entry *path_walk(char *name, unsigned long flags, struct dir_entry **create_file);
long FS_lseek(struct file *filp, long offset, long origin);

void DISK1_FAT32_FS_init(void);
void VFS_init(void);
# 13 "/home/steven/mine/src/include/task.h" 2
# 25 "/home/steven/mine/src/include/task.h"
extern char _text;
extern char _etext;
extern char _data;
extern char _edata;
extern char _rodata;
extern char _erodata;
extern char _bss;
extern char _ebss;
extern char _end;

extern unsigned long _stack_start;
extern long global_pid;

extern void ret_system_call();

extern unsigned long kallsyms_addresses[] __attribute__((__weak__));
extern long kallsyms_syms_num __attribute__((__weak__));
extern long kallsyms_index[] __attribute__((__weak__));
extern char* kallsyms_names __attribute((__weak__));
# 58 "/home/steven/mine/src/include/task.h"
struct mm_struct
{
 pml4t_t *pgd;

 unsigned long start_code, end_code;
 unsigned long start_data, end_data;
 unsigned long start_rodata, end_rodata;
 unsigned long start_bss, end_bss;
 unsigned long start_brk, end_brk;
 unsigned long start_stack, stack_length;
};

struct thread_struct
{
 unsigned long rsp0;

 unsigned long rip;
 unsigned long rsp;

 unsigned long fs;
 unsigned long gs;

 unsigned long cr2;
 unsigned long trap_nr;
 unsigned long error_code;
};


task_t
{

 volatile long state;
 unsigned long flags;
 long preempt_count;
 long signal;
 long blocked;
 sigaction_t* sigaction;


 struct mm_struct *mm;
 struct thread_struct *thread;
 struct List list;

 unsigned long addr_limit;



 long pid;

 u32 uid;
 u32 gid;
 u16 umask;

 long priority;
 long vrun_time;
 long exit_code;
 struct file *file_struct[10];


 wait_queue_t wait_childexit;
 task_t *next;
 task_t *parent;

 struct dir_entry *i_pwd;
 struct dir_entry *i_root;
 struct index_node *i_exec;
};


union task_union
{
 task_t task;
 unsigned long stack[32768 / sizeof(unsigned long)];
} __attribute__((aligned(8)));
# 159 "/home/steven/mine/src/include/task.h"
extern task_t *init_task[8];
extern union task_union init_task_union;
extern struct mm_struct init_mm;
extern struct thread_struct init_thread;

struct tss_struct
{
 unsigned int reserved0;
 unsigned long rsp0;
 unsigned long rsp1;
 unsigned long rsp2;
 unsigned long reserved1;
 unsigned long ist1;
 unsigned long ist2;
 unsigned long ist3;
 unsigned long ist4;
 unsigned long ist5;
 unsigned long ist6;
 unsigned long ist7;
 unsigned long reserved2;
 unsigned short reserved3;
 unsigned short iomapbaseaddr;
} __attribute__((packed));
# 202 "/home/steven/mine/src/include/task.h"
extern struct tss_struct init_tss[8];


extern task_t *my_cur;
static inline task_t *get_current()
{
 task_t *current = ((void *)0);

 __asm__ __volatile__("andq %%rsp,%0	\n\t"
       : "=r"(current)
       : "0"(~32767UL));
 my_cur = current;

 return current;
}
# 249 "/home/steven/mine/src/include/task.h"
unsigned long do_exit(unsigned long exit_code);
unsigned long do_fork(pt_regs_t *regs, unsigned long clone_flags, unsigned long stack_start, unsigned long stack_size);
void task_init();
void switch_mm(task_t *prev, task_t *next);
void wakeup_process(task_t *tsk);
void exit_files(task_t *tsk);
void __switch_to(task_t *prev, task_t *next);
# 9 "/home/steven/mine/src/include/lib/printk.h" 2
# 35 "/home/steven/mine/src/include/lib/printk.h"
extern unsigned char font_ascii[256][16];

char buf[4096] = {0};

struct position
{
 int XResolution;
 int YResolution;

 int XPosition;
 int YPosition;

 int XCharSize;
 int YCharSize;

 unsigned long *FB_addr;
 unsigned long FB_length;

 fair_spinlock_t printk_lock;
} Pos;

void putchar(unsigned int *fb, int Xsize, int x, int y, unsigned int FRcolor, unsigned int BKcolor, unsigned char font);
int skip_atoi(const char **s);





int sprintf(char *buf, const char *fmt, ...);

 int vsprintf(char *buf, const char *fmt, va_list args);
int color_printk(unsigned int FRcolor, unsigned int BKcolor, const char *fmt, ...);
void frame_buffer_init();
# 2 "debug.c" 2
# 23 "debug.c"
void user_spin(char *filename, const char *func, u64 line, const char *condition)
{
    color_printk(0x00ff0000, 0x00000000, "[%s %d:%s]: %s", strrchr(filename,'/') + 1, line, func, condition);;
    color_printk(0x00ff0000, 0x00000000, "[%s %d:%s]: %s", strrchr(filename,'/') + 1, line, func, condition);
    __asm__ __volatile__("cli	\n\t" ::: "memory");
    while(1);
}
